//
// Created by intellij-pest on 2021-04-26
// LOOP main grammar as defined theoretical computer science and logic
// Author: bmahmoud
//

// Defaults
WHITESPACE = _{ " " | "\t" }

grammar = { SOI ~ terms ~ EOI }

// Terminals:
IDENT = @{ (ASCII_ALPHA | "_") ~ ASCII_ALPHANUMERIC* }
VALUE = @{ ASCII_DIGIT+ }
ZERO = @{ "0" }
SEP = _{ (";" | (";"? ~ NEWLINE+)) }
// Value Or Ident
VI = _{ VALUE | IDENT }

OP_PLUS = { "+" }
OP_MINUS = { "-" }
OP_MULTIPLY = { "*" }

SIMPLE_OPERATOR = _{ OP_PLUS | OP_MINUS }
EXT_OPERATOR = _{ OP_MULTIPLY }
OPERATOR = _{ SIMPLE_OPERATOR |  EXT_OPERATOR }

// Comparison Operators (needed for capture)
EQ = { "=" | "==" }
NE = { "!=" }
GT = { ">" }
GE = { ">=" }
LT = { "<" }
LE = { "<=" }

// Comparison Collection
compEqual = { VI ~ EQ ~ VI }
compNotEqual = { VI ~ NE ~ VI }
compGreaterEqual = { VI ~ GE ~ VI }
compGreaterThan = { VI ~ GT  ~ VI }
compLessEqual = { VI ~ LE ~ VI }
compLessThan = { VI ~ LT  ~ VI }

// currently != 0 has a special meaning
compNotEqual0 = { IDENT ~ NE ~ ZERO }
compGreaterThanIdent = { IDENT ~ GT  ~ IDENT }

// Core Language:
binaryOp = {
    IDENT ~ SIMPLE_OPERATOR ~ VALUE
}

assign = {
    IDENT ~ ":=" ~
    binaryOp
}

loop_ = {
    "LOOP" ~ IDENT ~ "DO" ~ SEP
    ~ terms ~
    "END"
}

while_ = {
    "WHILE" ~ compNotEqual0 ~ "DO" ~ SEP
    ~ terms ~
    "END"
}

// macros
macroAssignToIdent = {
    IDENT ~ ":=" ~
    IDENT
}
macroAssignToZero =   {
    IDENT ~ ":=" ~
    "0"
}
macroAssignToValue = {
    IDENT ~ ":=" ~
    VALUE
}
macroAssignToIdentOpIdent = {
    IDENT ~ ":=" ~
    IDENT ~ OPERATOR ~ IDENT
}
macroAssignToIdentExtOpValue = {
    IDENT ~ ":=" ~
    IDENT ~ EXT_OPERATOR ~ VALUE
}

macroIfComps = _{
    compNotEqual0
    | compGreaterThan
    | compGreaterEqual
    | compLessThan
    | compLessEqual
}

// combine those two
macroElseStmt = {
    "ELSE" ~ SEP
    ~ terms ~
    "END"
}

macroConditional = {
    "IF" ~ macroIfComps ~ "THEN" ~ SEP
    ~ terms ~
    (macroElseStmt | "END")
}

macro_ = _{
    macroAssignToIdentExtOpValue
    | macroAssignToIdentOpIdent
    | macroAssignToIdent
    | macroAssignToZero
    | macroAssignToValue
    | macroConditional
}

// Expression Collection:
expr = _{
    loop_
    | while_
    | assign
    | macro_
}

terms = {
    NEWLINE* ~
    expr ~
    (SEP ~ expr)* ~
    SEP?
}