//
// Created by intellij-pest on 2021-04-26
// LOOP main grammar as defined theoretical computer science and logic
// Author: bmahmoud
//

// Defaults
WHITESPACE = _{ " " | "\t" }
COMMENT = _{ ("###" ~ (!"###" ~ ANY)* ~ "###") | ("#" ~ (!NEWLINE ~ ANY)*) }

grammar = { SOI ~ terms ~ EOI }

// Terminals:
IDENT = @{ (ASCII_ALPHA | "_") ~ ASCII_ALPHANUMERIC* }
VALUE = @{ ASCII_DIGIT+ }
ZERO = @{ "0" }
SEP = _{ (";" | (";"? ~ NEWLINE+)) }
ELLIPSIS = @{ "..." }
IDENT_OR_VALUE = _{ IDENT | VALUE }

OP_PLUS = { "+" }
OP_MINUS = { "-" }
OP_MULTIPLY = { "*" }

SIMPLE_OPERATOR = _{ OP_PLUS | OP_MINUS }
EXT_OPERATOR = _{ OP_MULTIPLY }
OPERATOR = _{ SIMPLE_OPERATOR |  EXT_OPERATOR }

// Comparison Operators (needed for capture)
EQ = { "==" | "=" }
NE = { "!=" }
GT = { ">" }
GE = { ">=" }
LT = { "<" }
LE = { "<=" }

// Comparison Collection
compEqual = { IDENT_OR_VALUE ~ EQ ~ IDENT_OR_VALUE }
compNotEqual = { IDENT_OR_VALUE ~ NE ~ IDENT_OR_VALUE }
compGreaterEqual = { IDENT_OR_VALUE ~ GE ~ IDENT_OR_VALUE }
compGreaterThan = { IDENT_OR_VALUE ~ GT  ~ IDENT_OR_VALUE }
compLessEqual = { IDENT_OR_VALUE ~ LE ~ IDENT_OR_VALUE }
compLessThan = { IDENT_OR_VALUE ~ LT  ~ IDENT_OR_VALUE }

// currently != 0 has a special meaning for conditionals and WHILE
compNotEqual0 = { IDENT_OR_VALUE ~ NE ~ ZERO }
compIdentNotEqual0 = { IDENT ~ NE ~ ZERO }

// Core Language:
binaryOp = {
    IDENT ~ SIMPLE_OPERATOR ~ VALUE
}

assign = {
    IDENT ~ ":=" ~
    binaryOp
}

loop_ = {
    ^"LOOP" ~ IDENT ~ ^"DO" ~ SEP
    ~ terms ~
    "END"
}

while_ = {
    ^"WHILE" ~ compIdentNotEqual0 ~ ^"DO" ~ SEP
    ~ terms ~
    ^"END"
}

// macros
macroAssignToIdent = {
    IDENT ~ ":=" ~
    IDENT
}
macroAssignToZero =   {
    IDENT ~ ":=" ~
    "0"
}
macroAssignToValue = {
    IDENT ~ ":=" ~
    VALUE
}
macroAssignToIdentOpIdent = {
    IDENT ~ ":=" ~
    IDENT ~ OPERATOR ~ IDENT
}
macroAssignToIdentExtOpValue = {
    IDENT ~ ":=" ~
    IDENT ~ EXT_OPERATOR ~ VALUE
}

// Conditionals
// If/Else
macroCondComps = _{
    compNotEqual0
    | compGreaterThan
    | compGreaterEqual
    | compLessThan
    | compLessEqual
    | compEqual
    | compNotEqual
}

macroElseStmt = {
    ^"ELSE" ~ SEP
    ~ terms ~
    ^"END"
}

macroConditional = {
    ^"IF" ~ macroCondComps ~ ^"THEN" ~ SEP
    ~ terms ~
    (macroElseStmt | "END")
}

// Conditional While
macroWhileComps = _{
    compGreaterThan
    | compGreaterEqual
    | compLessThan
    | compLessEqual
    | compEqual
    | compNotEqual
}

macroWhile = {
    ^"WHILE" ~ macroWhileComps ~ ^"DO" ~ SEP
    ~ terms ~
    ^"END"
}

macro_ = _{
    macroAssignToIdentExtOpValue
    | macroAssignToIdentOpIdent
    | macroAssignToIdent
    | macroAssignToZero
    | macroAssignToValue
    | macroConditional
}

// Expression Collection:
expr = _{
    ELLIPSIS
    | assign
    | loop_
    | while_
    | macro_
}

terms = {
    NEWLINE* ~
    expr ~
    (SEP ~ expr)* ~
    SEP?
}