@dialects { loop }

@top Program { Block }

@precedence {
  while @left,
  loop @left,
  do @left,
  if @left,
  then @left,
  else @left,
  end @left
}

@skip { whitespace | LineComment }

VariableName { word }

Expression { VariableName | Number }

BinaryArithExpression {
  VariableName ArithOp<"+"> Expression
  VariableName ArithOp<"-"> Expression
  VariableName ArithOp<"*"> Expression
}

BinaryCompareExpression {
  VariableName CompareOp<"=" | "=="> Expression
  VariableName CompareOp<"<="> Expression
  VariableName CompareOp<">="> Expression
  VariableName CompareOp<"!="> Expression
  VariableName CompareOp<"<"> Expression
  VariableName CompareOp<">"> Expression
}

statement {
  LoopStatement |
  IfStatement |
  WhileStatement |
  Assign
}

LoopStatement { !loop kw<"LOOP"> VariableName !do kw<"DO"> Block !end kw<"END"> }
IfStatement { !if kw<"IF"> BinaryCompareExpression !then kw<"THEN"> Block (!else kw<"ELSE"> Block)? !end kw<"END"> }
WhileStatement { !while kw<"WHILE"> BinaryCompareExpression !do kw<"DO"> Block !end kw<"END"> }
Assign { VariableName ":=" (BinaryArithExpression | Expression) }

Block { statement* }

kw<term> { @specialize[@name={term}]<word, term> }

@tokens {
  whitespace { std.whitespace+ }

  identifierChar { std.asciiLetter }
  underscore { "_" }
  word { identifierChar (identifierChar | std.digit | underscore)* }

  @precedence { word, whitespace }

  Number { std.digit }

  LineComment { "//" ![\n]* }

  ArithOp<expr> { expr }
  CompareOp<expr> { expr }

  @precedence {  }
}