@dialects { loop }

@top Program { statements }

@precedence {
  else @right,
  statement @cut
}

@skip { whitespace | LineComment | BlockComment }

VariableName { word }

Expression { VariableName | Number }

BinaryArithExpression {
  VariableName ArithOp<"+"> Expression
  VariableName ArithOp<"-"> Expression
  VariableName ArithOp<"*"> Expression
}

BinaryCompareExpression {
  VariableName CompareOp<"=" | "=="> Expression
  VariableName CompareOp<"<="> Expression
  VariableName CompareOp<">="> Expression
  VariableName CompareOp<"!="> Expression
  VariableName CompareOp<"<"> Expression
  VariableName CompareOp<">"> Expression
}

statement {
  LoopStatement |
  IfStatement |
  WhileStatement |
  Assign
}

LoopStatement { kw<"LOOP"> VariableName LoopBlock }
IfStatement { kw<"IF"> BinaryCompareExpression (IfBlock | IfElseBlock) }
WhileStatement { kw<"WHILE"> BinaryCompareExpression LoopBlock }
Assign { VariableName ":=" (BinaryArithExpression | Expression) }

statements { statement* }

LoopBlock { kw<"DO"> statements kw<"END"> }
IfBlock { kw<"THEN"> statements kw<"END"> }
IfElseBlock { kw<"THEN"> statements !else kw<"ELSE"> statements kw<"END"> }

kw<term> { @specialize[@name={term}]<word, term> }

@tokens {
  whitespace { std.whitespace+ }

  identifierChar { std.asciiLetter }
  underscore { "_" }
  word { identifierChar (identifierChar | std.digit | underscore)* }

  @precedence { word, whitespace }

  Number { std.digit }

  LineComment { "#" ![\n]* }
  BlockComment { "###" BlockCommentContent "###" }

  @precedence { BlockComment, LineComment }

  BlockCommentContent { (![#] | "#" BlockCommentContent2)+ }
  BlockCommentContent2 { (![#] | "#" BlockCommentContent3) }
  BlockCommentContent3 { ![#] }

  ArithOp<expr> { expr }
  CompareOp<expr> { expr }
}